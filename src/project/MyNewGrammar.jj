/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;

  LOOKAHEAD = 6;
  //DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(MyNewGrammar)
package project;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;



public class MyNewGrammar
{
  public static void main(String args []) throws ParseException
  {
    String txt;
    MyNewGrammar parser = new MyNewGrammar(System.in);
    String filename = "C:\\Users\\leedongjae\\Desktop\\2-2\\프로그래밍언어개론\\20154652이동재javacc\\output6.txt";
    System.out.println("Reading from standard input...");
    txt = parser.one_line();
    System.out.println(txt);

   try {
      BufferedWriter fw = new BufferedWriter(new FileWriter(filename));
       
       fw.write(txt);
       fw.flush();
       fw.close();
   }catch(Exception e) {
     e.printStackTrace();
   }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  "fragment"
| "version" 
| "extension"
| "graph" 
| "tensor" 
| "integer" 
| "scalar" 
| "logical" 
| "string" 
| "shape_of" 
| "length_of" 
| "range_of" 
| "for" 
| "in" 
| "yield"
| "if"
| "else"
}

TOKEN :
{
  
  < LOGICAL_LITERAL : ("true" | "false") >
| < IDENTIFIER : (["_", "a"-"z", "A"-"Z"])+(["a"-"z","A"-"Z","0"-"9","_"])* > 
| < NUMERIC_LITERAL : (["+", "-"])?([ "0"-"9" ])+( "." ([ "0"-"9" ])+ )?( [ "E", "e" ] ([ "+", "-" ])? ([ "0"-"9" ])+ )? >
| < STRING_LITERAL : ("'" | "\"") ([ "a"-"z", "A"-"Z", "/", "_", "0"-"9", "[", "]"])* ("'" | "\"")  >
| < ARROW :  "->" >
| < LESS : "<"  > 
| < LESS_EQUAL : "<="  > 
| < GREATER : ">"  >
| < GREATER_EQUAL : ">="  > 
| < EQUAL : "==" > 
| < NOT_EQUAL : "!="  > 
| < PLUS : "+"  > 
| < MINUS : "-"  > 
| < MULT : "*"  > 
| < DIV : "/"  > 
| < POW : "^"  > 
| < AND : "&"  > 
| < OR : "|"  > 
| < NOT : "!"  >  
| < COMMA : ","  >
| < L_PAREN : "("  > 
| < R_PAREN : ")" > 
| < L_BRACKET : "["  > 
| < R_BRACKET : "]"  > 
| < ASSIGN : "="  >
| < L_BRACE : "{" > 
| < R_BRACE : "}" > 
| < COLON : ":" > 
| < SEMI_COLON : ";" > 
| < QUESTION : "?" >
| < DOT : "." >
}


String one_line():
{
   String res = "";
}
{
  (
    ( res = graph_definition()) { ; } | (res = fragment_definition()) { ; }
  ){     
     return res;
   }
}

String graph_definition():
{
   String f;
   String def = "";
}
{
  (    
    (def = graph_declaration()){ ; }(f = body()) { def += f; }
  ){
      return def;
  }
}


String body():
{
    String a;
   String bod = "";
}
{
  (  
     ("{") ((a=assignment()) { bod+=a; })+ ("}")
  ) {
       return bod;
   }     
}

String argument_list():
{
   String a;
   String b;
   String result="";
}
{
  (
    (a=argument()) { result+=a; } ("," (b=argument()) { result += ','+b; })*
  ) {
      return result;
    }

}

String assignment() :
{
  String result1 = "";
  String result2 = "";
}
{
  (result1 = lvalue_expr()) "=" (result2 = rvalue_expr()) ";"
  {
    return (result1 + "= " + result2 + ";\r\n");
  }
}

String rvalue_expr():
{
    Token t;
    String a;
   String b;
   String c;
   String result="";
   String result2="";
}
{      
  (
       (a=invocation()){ result+=a; }
   | (t=< IDENTIFIER >) { result+=t.toString();  }
   | (a=literal()) { result+=a; }     
      | (a=unary_expr()){ result+=a; }  
    | (a=paren_expr()){ result+=a; }
| (a=array_rvalue_expr()){ result+=a; } 
   | (a=tuple_rvalue_expr()){ result+=a; } 
   | (a=comprehension_expr()){ result+=a; }     
    | (a=builtin_expr()){ result+=a; }

  )

  (
    (("[") { result2+="["; } ( (a=rvalue_expr()){ result2+=a; }| [(b=rvalue_expr())] (":") [(c=rvalue_expr())] ) ("]"){ result2+="]"; })
   | ((a=binary_operator()){ result2+=a; } (b=rvalue_expr()){ result2+=b; }) 
    | ("if" (a=rvalue_expr()) "else" (b=rvalue_expr()) { result2 = " if "+a+" else "+b; })
 
  )*
     

   {
       return (result.concat(result2));
    }  
}

String array_rvalue_expr():
{
   String a;
   String b;
   String result="";
}
{
  (   
     ("[") { result+="["; } [ (a=rvalue_expr()){ result+=a; } ("," (b=rvalue_expr()) { result += ','+b; })* ] ("]"){ result+="]"; }
  ) {
       return result;
     }    
}


String comprehension_expr():
{
   String a;
   String b;
   String c;
   String result="";
}
{
  (
       ("[") {result+="["; }("for"){result+="for"; } (a=loop_iter_list()){result+=a; } [ ("if"){result+="if"; } (b=rvalue_expr()){result+=b; }]
     ("yield"){result+="yield"; } (c=rvalue_expr()){result+=c; } ("]"){result+="]"; }
  ) {
       return result;
     }   
}


String builtin_expr():
{
    String a;
   String b;
   String result="";
}
{
(
  
  (a=builtin_name()) { result+=a; } ("("){ result+="("; } (b=rvalue_expr()){ result+=b; } (")"){ result+=")"; }
) {
     return result;
  }
}

String loop_iter_list():
{
    String a;
   String b;
   String result="";
 }
{
  (   
     (a=loop_iter()){ result+=a; }("," (b=loop_iter()) { result += ','+b; })*
  )
  {
     return result;
  }
}

String loop_iter():
{
   Token t;
   String a;
   String result="";
}
{
  (
    (t=< IDENTIFIER >) { result+=t.toString(); } ("in") { result+="in"; } (a=rvalue_expr()){ result+=a; } 
  )
{
     return result;
  }
}

String builtin_name():
{
   String result="";
}
{
  (
       ("shape_of") { result="tf.shape"; }
      |("length_of"){ result="length_of"; }
      |("range_of"){ result="range_of"; }
      |("integer"){ result="integer"; }
      |("scalar"){ result="scalar"; }
      |("logical"){ result="logical"; }
      |("string"){ result="string"; }
  ){
     return result;
   }
}


String graph_declaration():
{
   String res= "";
   Token id;
   String l_list;
   String r_list;
   String name;
 }
{
  (    
         "graph" (id = < IDENTIFIER >)< L_PAREN > (l_list = identifier_list()) < R_PAREN > < ARROW > < L_PAREN >(identifier_list()) < R_PAREN >
  ){
       return res;
   }
}

String identifier_list():
{
   String res = "";
   Token l_id;
   Token r_id;
  }
{
  (
      (l_id = < IDENTIFIER >) { res += l_id.toString(); } ( < COMMA > (r_id = < IDENTIFIER >){ res += "," + r_id.toString(); } )*
  ){
      return res;
   }
}


String if_identifier_expr():
{
   String result = "";
   Token t;
   String f;
}
{
( 
  ( t = <IDENTIFIER> ){ f = t.toString(); result += " " + f; } ( t = <IDENTIFIER> ){ f = t.toString(); result +=  " " + f; }( t = <IDENTIFIER> ){ f = t.toString(); result += " " + f; }( t = <IDENTIFIER> ){ f = t.toString(); result +=  " " + f; }
  ) { return result; }
}

String built_if_expr():
{
   String result = "";
   String f;
}
{
   (
     ( f = builtin_expr() ) { result +=  " " +  f; } (("/") { result += " / "; } ( f = if_invoc_else_expr() ) { result += " " +  f; } | (";") { result += ";\r\n"; })
   ) { return result; }
}

String if_expr():
{
   String result = "";
   Token t;
   String f;
}
{
  ( 
   ( t = <IDENTIFIER> ){ f = t.toString(); result +=  " " +  f; } ( t = <IDENTIFIER> ){ f = t.toString(); result += " " +  f; }( t = <IDENTIFIER> ){ f = t.toString(); result +=  " " + f; } (f = invocation()) { result += " " + f; } ( < SEMI_COLON >){ result += ";" + "\r\n";}
  ) { return result; }
}

String invocation():
{
   Token id;
   String type = "";
   String name;
   String Result = "";
   String f = "";
  }
{
   (
     (
     (id = < IDENTIFIER >)
     {       
       name = id.toString();
      switch(name){
        case "variable":
           Result += " tf.Variable";
           break;
        case "avg_pool":
         Result += " tf.nn.avg_pool";
           break;
        case "constant":
         Result += " tf.constant";
           break;
        case "conv":
         Result += " tf.layers.conv2d";
          break;
        case "deconv":
         Result += " tf.layers.conv2d_transpose";
          break;
        case "concat":
         Result += " tf.concat";
          break;
        case "tanh":
         Result += " tf.tanh";
          break;
        case "sigmoid":
            Result += " tf.sigmoid";
          break;
        case "relu":
         Result += " tf.nn.relu";
          break;
        case "conv_layer":
         Result += " tf.nn.conv2d";
          break;
        case "max_pool_layer":
            Result += " tf.nn.max_pool";
          break;
        case "max_pool":
         Result += " tf.nn.max_pool";
          break;
        case "reshape":
         Result += " tf.reshape";
           break;
        case "matmul":
         Result += " tf.matmul";
          break;
        case "local_response_normalization":
            Result += " tf.nn.local_response_normalization";
          break;
        case "dropout":
         Result += " tf.nn.dropout";
          break;
        case "add":
         Result += " tf.add";
          break;
        case "softmax":
         Result += " tf.nn.softmax";
          break;
        default:
           Result += " " + name;
           break;
      }
     }
     (
      ["<" type = type_name()">"])
      < L_PAREN >
      (f = argument_list())
      < R_PAREN >
      ){                   
       Result += "(" + f + ")";
       }
    ){
      return Result;
    }
}

String array_argument():
{
   String result = "";
   String f;
}
{
   (
      ("(") { result += "("; }
      (f = argument_list()) { result += f; }        
      (")") { result += ")"; }   
   ) { return result; }
}

String argument():
{
   Token id;
   String exp;
   String name;
   String result = "";
   String f;
   
  }
{
  (  
          (
         (id = < IDENTIFIER >) {
             name = id.toString();
            switch(name) {             
            case "label":
            result += "label";
            break;
            default:
             result += name;
             break;
           }
         }
         (< ASSIGN >) { result += "="; }
         (f = rvalue_expr()) { result += f;}
         (("+") { result += "+" ; } (f = rvalue_expr()) { result += f; })*
          )
        | (exp = invocation() ) { result += exp; }
        | (exp = rvalue_expr()){ result += exp; }      
  ){
   return result;
  }   
}

String lvalue_expr():
{
  String result = "";
  Token id;
}
{
  (
    ( id =  <IDENTIFIER> ) {result = id.toString();}
  | ( result = array_lvalue_expr() ) {;}
  | ( result = tuple_lvalue_expr() ) {;}
  ) { return result; }      
}

String array_lvalue_expr():
{
   String result = "";
   String f;
   String s;
}
{
   (
     < L_BRACKET > [ (f = lvalue_expr()) { result += f; } (< COMMA > (s = lvalue_expr()){result += ',' + s;})*] <R_BRACKET>
   ){
      return result;
   }
}

String tuple_lvalue_expr():
{
   String result = "";
   String f;
   String s;
   Token t;
}
{
   (
     < L_PAREN > (f = lvalue_expr()) { result += f; } (< COMMA > (s = lvalue_expr()){result += ',' + s;})+ <R_PAREN>
   | ((t = < IDENTIFIER >){ f = t.toString(); result += f; } | (f = array_lvalue_expr()) { result += f; } )(< COMMA > (s = lvalue_expr()){result += ',' + s;})+
   ){
      return result;
   }
}



String if_invoc_else_expr():
{
   String result = "";
   String f;
   String s;
   Token t;
}
{
   (
      ( t = < IDENTIFIER > ){ result += " " + t.toString(); }  ( t = < IDENTIFIER > ){ result += " " + t.toString(); } (f = rvalue_expr()) { result += " " + f; }
      ( (t = < NOT_EQUAL >) | (t = < EQUAL >)) { result += " " + t.toString();}
      ( t = < NUMERIC_LITERAL > ){ result += " " + t.toString(); }( t = < IDENTIFIER > ){ result += " " + t.toString(); }
      (
        ( t = < NUMERIC_LITERAL > ){ result += " " + t.toString(); }           
        |  ("[") { result += "["; } (( t = < IDENTIFIER > ){result += t.toString();})*("]") { result += "]"; }
      )
   ) { return result; }
}

String plus_rcall_expr():
{
   String result = "";
   Token t;
   String f;
}
{
 (
     ( t = < IDENTIFIER > ) { f = t.toString(); result += f; } ("+") { result += "+"; } ((f = literal()){ result += f; })+       

     ) { return result; }
}

String array_rcall_expr():
{
   String result = "";
   Token t;
   String f;
}
{
     (
       ( t = < IDENTIFIER > ) { f = t.toString(); result += f; } ("[") { result += "["; } ([(":") { result += ":" ;}](t = < NUMERIC_LITERAL >){f = t.toString(); result += f; }[(":") { result += ":" ;}])+ ("]"){ result += "]"; }         

     ) { return result; }
}


String tuple_rvalue_expr():
{
   String result = "";
   String f;
   String s;
}
{
   (
     (<L_PAREN>) { result += "( "; }
     (f = rvalue_expr()) { result += f; }
     (< COMMA > (s = rvalue_expr()){result += ',' + s;})+
     (<R_PAREN>) { result += ") "; }
   ){
      return result;
   }
}

String literal():
{
   String result="";
   Token t;
   Token s;
   String f;
}   
{
   (
      (
        t = < NUMERIC_LITERAL >
      ) { result = t.toString(); }
   |
      (
        t = < LOGICAL_LITERAL >
      ) { result = t.toString(); }
   |
      (
        t = < STRING_LITERAL >
      ) { result = t.toString(); }

   ) { return result; }
}


String fragment_definition():
{
   String def = "";
   String f;
   String io[] = { "","" };
}
{

  (    
    (io = fragment_declaration()) { ; } (f = body()) { def += f; }
  ){
       def = io[0] + "\r\n\r\n" + def + "\r\n" + io[1];
      return def;
  }
}

String[] fragment_declaration():
{
     Token t;
     String ts;
   String result="";
   String output;
   String paramlist;
   String io[] = { "", "" };
}
{
    (
      "fragment" (t = < IDENTIFIER >) {result += "def "; ts = t.toString(); result += ts; } [ generic_declaration() ]
      (<L_PAREN >) { result += "("; }
      (paramlist = parameter_list()) { result += paramlist; }
      (< R_PAREN >) { result += "):"; }
      < ARROW >
      < L_PAREN >
      ( output = result_list() ) { io[1] += "return " + output; }
      < R_PAREN >
    ) {
         io[0] = result;
         
         return io;
      }
}

String generic_declaration():
{
   String type;
   String result="";
}
{
   (
     "<" "?" [ "=" (type = type_name()) { result += type; }] ">"
   ) { return result; }
}

String parameter_list():
{
   String result="";
   String paramlist;
}
{
   (
     ( paramlist = parameter() ) { result += paramlist; } ("," (paramlist = parameter()) { result += ", " + paramlist; })*
   ) { return result; }
}

String parameter():
{
   Token t;
   String ts;
   String result="";
   String type;
   String literal;
}
{
   (
     ( t = < IDENTIFIER > ) { ts = t.toString(); result += ts; } ":" (type_spec()) [ "=" (literal_expr()) ]       
   ) { return result; }
}

String result_list():
{
   String result="";
   String paramlist;
}
{
   (
     ( paramlist = result() ) { result += paramlist; } ("," (paramlist = result()) { result += paramlist; })*
   ) { return result; }
}

String result():
{
   Token t;
   String ts;
   String result="";
   String type;
   String literal;
}
{
   (
     ( t = < IDENTIFIER > ) { ts = t.toString(); result += ts;} ":"  (type = type_spec())
       
   ) { return result; }
}

String literal_expr() :
{
  String result = "";
  Token id;
}
{
  (
    ( result =  literal() ) {;}
  | ( result = array_literal_expr() ) {;}
  | ( result = tuple_literal_expr() ) {;}
  | ( result = builtin_expr() ) { ; }
  ) { return result; }      
}

String array_literal_expr():
{
   String result = "";
   String f;
   String s;
}
{
   (
     (< L_BRACKET >) { result += " [ "; }
     [
        (f = literal_expr()) { result += f; }
        (< COMMA > (s = literal_expr()){result += ',' + s;})*
     ]
     (<R_BRACKET>) { result += " ] "; }     
   ){
      return result;
   }
}

String tuple_literal_expr():
{
   String result = "";
   String f;
   String s;
}
{
   (
     < L_PAREN > (f = literal_expr()) { result += f; } (< COMMA > (s = literal_expr()){result += ',' + s;})+ <R_PAREN>
   ){
      return result;
   }
}

String array_type_spec():
{
   String result = "";
}
{
   (
     ((result = tuple_type_spec()) { ; } | (result = tensor_type_spec()) { ; } | (result = type_name()) { ; }) < L_BRACKET > < R_BRACKET >
   ) { result += "[]"; return result; }
}

String tuple_type_spec():
{
   String result="";
   String f;
   String s;
}
{
   (
     < L_PAREN > (f = type_spec()) { result += f; } ( < COMMA > (s = type_spec()) {result += s;} )+ < R_PAREN >
   ) { return result; }
}

String type_name():
{
   String result;
}
{
   (
     ("tensor") { result = "tensor"; }
   | ("integer") { result = "integer"; }
   | ("scalar") { result = "scalar"; }
   | ("logical") { result = "logical"; }
   | ("string") { result = "string"; }
   | ("?") { result = "?"; }       
   ) { return result; }
}

String tensor_type_spec():
{
   String result = "";
   String type;
}
{
   (
     "tensor" "<" [ (type = type_name()) { result = type; } ] ">"
   ) { return result; }
}

String assign_type_spec():
{
   String result = "";
   String type;
}
{
   (
     (type = type_name()) { result += type; } <ASSIGN> (type = rvalue_expr()) { result += type; } 
   ) { return result; }
}

String type_spec():
{
   String result;
}
{
   (
     ( result = assign_type_spec() ) { ; }        
   | ( result = tensor_type_spec() ) { ; }   
   | ( result = array_type_spec() ) { ; }
   | ( result = tuple_type_spec() ) { ; }
   | ( result =  type_name() ) { ; }    
   ) { return result; }
}

String comparison_operator():
{
   String result;
}
{
   (
      ("<") { result = "<"; }
   |    ("<=") { result = "<="; }
   |    (">") { result = ">"; }
   |    (">=") { result = ">="; }
   |    ("==") { result = "=="; }
   |    ("!=") { result = "!="; }
   |    ("in") { result = "in"; }
    ) { return result; }
}


String binary_arithmetic_operator():
{
   String result;
}
{
   (
      ("+") { result = "+"; }
   |    ("-") { result = "-"; }
   |    ("*") { result = "*"; }
   |    ("/") { result = "/"; }
   |    ("^") { result = "^"; }
    ) { return result; }
}

String binary_logical_operator():
{
   String result;
}
{
   (
      ("&&") { result = "&&"; }
   |    ("||") { result = "||"; }
    ) { return result; }
}

String binary_operator():
{
   String result;
}
{
   (
     ( result = comparison_operator() ) { ; }
   | ( result = binary_arithmetic_operator() ) { ; }
   | ( result = binary_logical_operator() ) { ; }       
   ) { return result; }
}


String unary_arithmetic_operator():
{
   String result;
}
{
   (
      ("+") { result = "+"; }
   |    ("-") { result = "-"; }
    ) { return result; }
}

String unary_logical_operator():
{
   String result;
}
{
   (
      ("!") { result = "!"; }
    ) { return result; }
}

String unary_operator():
{
   String result;
}
{
   (
     ( result = unary_arithmetic_operator() ) { ; }
   | ( result = unary_logical_operator() ) { ; }       
   ) { return result; }
}

String unary_expr():
{
   String result="";
   String f;
   String s;
}
{
   (
     ( f = unary_operator() ) { result += f; } ( s = rvalue_expr()) { result += s; }       
   ) { return result; }
}

String binary_expr():
{
   String result="";
   Token id;
   String f;
   String s;
   String t;
}
{
   (
      ( f = rvalue_expr() ){ result += f; } ( s = binary_operator()) { result += s; } ( t = rvalue_expr() ) { result += t; }       
   ) { return result; }
}

String paren_expr():
{
   String result;
}
{
   (< L_PAREN > (result = rvalue_expr()) { ; } < R_PAREN >)
   {
      return result;
   }
}
