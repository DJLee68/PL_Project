/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package project;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LOGICAL_LITERAL = 22;
  /** RegularExpression Id. */
  int IDENTIFIER = 23;
  /** RegularExpression Id. */
  int NUMERIC_LITERAL = 24;
  /** RegularExpression Id. */
  int STRING_LITERAL = 25;
  /** RegularExpression Id. */
  int ARROW = 26;
  /** RegularExpression Id. */
  int LESS = 27;
  /** RegularExpression Id. */
  int LESS_EQUAL = 28;
  /** RegularExpression Id. */
  int GREATER = 29;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 30;
  /** RegularExpression Id. */
  int EQUAL = 31;
  /** RegularExpression Id. */
  int NOT_EQUAL = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int MULT = 35;
  /** RegularExpression Id. */
  int DIV = 36;
  /** RegularExpression Id. */
  int POW = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int NOT = 40;
  /** RegularExpression Id. */
  int COMMA = 41;
  /** RegularExpression Id. */
  int L_PAREN = 42;
  /** RegularExpression Id. */
  int R_PAREN = 43;
  /** RegularExpression Id. */
  int L_BRACKET = 44;
  /** RegularExpression Id. */
  int R_BRACKET = 45;
  /** RegularExpression Id. */
  int ASSIGN = 46;
  /** RegularExpression Id. */
  int L_BRACE = 47;
  /** RegularExpression Id. */
  int R_BRACE = 48;
  /** RegularExpression Id. */
  int COLON = 49;
  /** RegularExpression Id. */
  int SEMI_COLON = 50;
  /** RegularExpression Id. */
  int QUESTION = 51;
  /** RegularExpression Id. */
  int DOT = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"fragment\"",
    "\"version\"",
    "\"extension\"",
    "\"graph\"",
    "\"tensor\"",
    "\"integer\"",
    "\"scalar\"",
    "\"logical\"",
    "\"string\"",
    "\"shape_of\"",
    "\"length_of\"",
    "\"range_of\"",
    "\"for\"",
    "\"in\"",
    "\"yield\"",
    "\"if\"",
    "\"else\"",
    "<LOGICAL_LITERAL>",
    "<IDENTIFIER>",
    "<NUMERIC_LITERAL>",
    "<STRING_LITERAL>",
    "\"->\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\".\"",
    "\"&&\"",
    "\"||\"",
  };

}
